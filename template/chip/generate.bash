#!/usr/bin/env bash

CHIP_LIST_URL="https://www.wch-ic.com/api/product_tables/47?page=1&limit=100"
OUTPUT_FILE="model.zig"

curl $CHIP_LIST_URL -o chip-list.json

cat <<EOF >"$OUTPUT_FILE"
// This file is generated by template/chip/generate.bash. DO NOT EDIT.
const std = @import("std");
const Series = @import("series.zig").Series;

pub const Model = enum {
EOF

cat chip-list.json | jq -r '.data[] | select(.["Part NO."] | startswith("CH32V")) | ["    ", .["Part NO."], ", // ", .Flash, " / ", .SRAM, " / ", .Freq, " / ", .Package, " (", .GPIO, " GPIO)"] | join("")' >>"$OUTPUT_FILE"

cat <<EOF >>"$OUTPUT_FILE"

    pub fn series(self: Model) Series {
        return switch (self) {
EOF

declare -A model_series

while IFS='|' read -r key value; do
  key=$(echo "$key" | sed -e 's/CH32V20[0-9]/CH32V20x/g' -e 's/CH32V30[0-9]/CH32V30x/g')
  model_series["$key"]+=".$value, "
done < <(cat chip-list.json | jq -r '.data[] | select(.["Part NO."] | startswith("CH32V")) | [(.["url"] | split("/")[-1] | split(".")[0]), "|", .["Part NO."] ] | join("")' | sort)

for key in $(printf "%s\n" "${!model_series[@]}" | sort); do
  formatted_value=$(echo "${model_series[$key]}" | sed 's/, $//')
  echo "            ${formatted_value} => .$key," >>"$OUTPUT_FILE"
done

cat <<EOF >>"$OUTPUT_FILE"
        };
    }

    pub fn linkScript(self: Model, b: *std.Build) std.Build.LazyPath {
        const name = switch (self) {
EOF

declare -A model_link_script

while IFS='|' read -r key value; do
  model_link_script["$key"]+=".$value, "
done < <(cat chip-list.json | jq -r '.data[] | select(.["Part NO."] | startswith("CH32V")) | [ .Flash, "_", .SRAM, "|", .["Part NO."] ] | join("")' | sort)

for key in $(printf "%s\n" "${!model_link_script[@]}" | sort); do
  formatted_value=$(echo "${model_link_script[$key]}" | sed 's/, $//')
  flash=$(echo "$key" | cut -d"_" -f1)
  sram=$(echo "$key" | cut -d"_" -f2)

  echo "            ${formatted_value} => \"CH32V_${flash}_${sram}.ld\"," >>"$OUTPUT_FILE"
done

cat <<EOF >>"$OUTPUT_FILE"
        };

        return b.path(b.pathJoin(&.{ "ld", name }));
    }

    pub fn target(self: Model) std.Target.Query {
        return self.series().target();
    }

    pub fn string(self: Model) []const u8 {
        return @tagName(self);
    }
};
EOF
