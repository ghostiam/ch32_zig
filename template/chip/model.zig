// This file is generated by template/chip/generate.bash. DO NOT EDIT.
const std = @import("std");
const Series = @import("series.zig").Series;

pub const Model = enum {
    CH32V003J4M6, // 16K / 2K / 48MHz / SOP8 (6 GPIO)
    CH32V003A4M6, // 16K / 2K / 48MHz / SOP16 (14 GPIO)
    CH32V003F4U6, // 16K / 2K / 48MHz / QFN20 (18 GPIO)
    CH32V003F4P6, // 16K / 2K / 48MHz / TSSOP20 (18 GPIO)
    CH32V103C8U6, // 64K / 20K / 80MHz / QFN48X7 (37 GPIO)
    CH32V103C6T6, // 32K / 10K / 80MHz / LQFP48 (37 GPIO)
    CH32V103C8T6, // 64K / 20K / 80MHz / LQFP48 (37 GPIO)
    CH32V103R8T6, // 64K / 20K / 80MHz / LQFP64M (51 GPIO)
    CH32V203F6P6, // 32K / 10K / 144MHz / TSSOP20 (16 GPIO)
    CH32V203G6U6, // 32K / 10K / 144MHz / QFN28 (24 GPIO)
    CH32V203K6T6, // 32K / 10K / 144MHz / LQFP32 (26 GPIO)
    CH32V203C6T6, // 32K / 10K / 144MHz / LQFP48 (37 GPIO)
    CH32V203F8P6, // 64K / 20K / 144MHz / TSSOP20 (17 GPIO)
    CH32V203F8U6, // 64K / 20K / 144MHz / QFN20 (19 GPIO)
    CH32V203G8R6, // 64K / 20K / 144MHz / QSOP28 (24 GPIO)
    CH32V203K8T6, // 64K / 20K / 144MHz / LQFP32 (26 GPIO)
    CH32V203C8T6, // 64K / 20K / 144MHz / LQFP48 (37 GPIO)
    CH32V203C8U6, // 64K / 20K / 144MHz / QFN48X7 (37 GPIO)
    CH32V203RBT6, // 128K / 64K / 144MHz / LQFP64M (51 GPIO)
    CH32V303CBT6, // 128K / 32K / 144MHz / LQFP48 (37 GPIO)
    CH32V303RBT6, // 128K / 32K / 144MHz / LQFP64M (51 GPIO)
    CH32V303RCT6, // 256K / 64K / 144MHz / LQFP64M (51 GPIO)
    CH32V303VCT6, // 256K / 64K / 144MHz / LQFP100 (80 GPIO)
    CH32V305FBP6, // 128K / 32K / 144MHz / TSSOP20 (17 GPIO)
    CH32V305GBU6, // 128K / 32K / 144MHz / QFN28 (24 GPIO)
    CH32V305RBT6, // 128K / 32K / 144MHz / LQFP64M (51 GPIO)
    CH32V307RCT6, // 256K / 64K / 144MHz / LQFP64M (51 GPIO)
    CH32V307WCU6, // 256K / 64K / 144MHz / QFN68 (54 GPIO)
    CH32V307VCT6, // 256K / 64K / 144MHz / LQFP100 (80 GPIO)
    CH32V208GBU6, // 128K / 64K / 144MHz / QFN28 (21 GPIO)
    CH32V208CBU6, // 128K / 64K / 144MHz / QFN48 (37 GPIO)
    CH32V208RBT6, // 128K / 64K / 144MHz / LQFP64M (49 GPIO)
    CH32V208WBU6, // 128K / 64K / 144MHz / QFN68 (53 GPIO)

    pub fn series(self: Model) Series {
        return switch (self) {
            .CH32V003A4M6, .CH32V003F4P6, .CH32V003F4U6, .CH32V003J4M6 => .CH32V003,
            .CH32V103C6T6, .CH32V103C8T6, .CH32V103C8U6, .CH32V103R8T6 => .CH32V103,
            .CH32V203C6T6, .CH32V203C8T6, .CH32V203C8U6, .CH32V203F6P6, .CH32V203F8P6, .CH32V203F8U6, .CH32V203G6U6, .CH32V203G8R6, .CH32V203K6T6, .CH32V203K8T6, .CH32V203RBT6, .CH32V208CBU6, .CH32V208GBU6, .CH32V208RBT6, .CH32V208WBU6 => .CH32V20x,
            .CH32V303CBT6, .CH32V303RBT6, .CH32V303RCT6, .CH32V303VCT6, .CH32V305FBP6, .CH32V305GBU6, .CH32V305RBT6, .CH32V307RCT6, .CH32V307VCT6, .CH32V307WCU6 => .CH32V30x,
        };
    }

    pub fn linkScript(self: Model, b: *std.Build) std.Build.LazyPath {
        const name = switch (self) {
            .CH32V303CBT6, .CH32V303RBT6, .CH32V305FBP6, .CH32V305GBU6, .CH32V305RBT6 => "CH32V_128K_32K.ld",
            .CH32V203RBT6, .CH32V208CBU6, .CH32V208GBU6, .CH32V208RBT6, .CH32V208WBU6 => "CH32V_128K_64K.ld",
            .CH32V003A4M6, .CH32V003F4P6, .CH32V003F4U6, .CH32V003J4M6 => "CH32V_16K_2K.ld",
            .CH32V303RCT6, .CH32V303VCT6, .CH32V307RCT6, .CH32V307VCT6, .CH32V307WCU6 => "CH32V_256K_64K.ld",
            .CH32V103C6T6, .CH32V203C6T6, .CH32V203F6P6, .CH32V203G6U6, .CH32V203K6T6 => "CH32V_32K_10K.ld",
            .CH32V103C8T6, .CH32V103C8U6, .CH32V103R8T6, .CH32V203C8T6, .CH32V203C8U6, .CH32V203F8P6, .CH32V203F8U6, .CH32V203G8R6, .CH32V203K8T6 => "CH32V_64K_20K.ld",
        };

        return b.path(b.pathJoin(&.{ "ld", name }));
    }

    pub fn target(self: Model) std.Target.Query {
        return self.series().target();
    }

    pub fn string(self: Model) []const u8 {
        return @tagName(self);
    }
};
